// Code generated by goa v3.2.3, DO NOT EDIT.
//
// auth endpoints
//
// Command:
// $ goa gen github.com/elmawardy/tahor/auth/design

package auth

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "auth" service endpoints.
type Endpoints struct {
	Register     goa.Endpoint
	Signin       goa.Endpoint
	Signout      goa.Endpoint
	Getbasicinfo goa.Endpoint
}

// NewEndpoints wraps the methods of the "auth" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Register:     NewRegisterEndpoint(s),
		Signin:       NewSigninEndpoint(s),
		Signout:      NewSignoutEndpoint(s),
		Getbasicinfo: NewGetbasicinfoEndpoint(s),
	}
}

// Use applies the given middleware to all the "auth" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Register = m(e.Register)
	e.Signin = m(e.Signin)
	e.Signout = m(e.Signout)
	e.Getbasicinfo = m(e.Getbasicinfo)
}

// NewRegisterEndpoint returns an endpoint function that calls the method
// "register" of service "auth".
func NewRegisterEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*RegisterPayload)
		return s.Register(ctx, p)
	}
}

// NewSigninEndpoint returns an endpoint function that calls the method
// "signin" of service "auth".
func NewSigninEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*SigninPayload)
		return s.Signin(ctx, p)
	}
}

// NewSignoutEndpoint returns an endpoint function that calls the method
// "signout" of service "auth".
func NewSignoutEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*SignoutPayload)
		return s.Signout(ctx, p)
	}
}

// NewGetbasicinfoEndpoint returns an endpoint function that calls the method
// "getbasicinfo" of service "auth".
func NewGetbasicinfoEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetbasicinfoPayload)
		return s.Getbasicinfo(ctx, p)
	}
}
