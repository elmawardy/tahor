// Code generated by goa v3.2.3, DO NOT EDIT.
//
// auth HTTP client CLI support package
//
// Command:
// $ goa gen github.com/elmawardy/tahor/auth/design

package client

import (
	"encoding/json"
	"fmt"

	auth "github.com/elmawardy/tahor/auth/gen/auth"
)

// BuildRegisterPayload builds the payload for the auth register endpoint from
// CLI flags.
func BuildRegisterPayload(authRegisterBody string) (*auth.RegisterPayload, error) {
	var err error
	var body RegisterRequestBody
	{
		err = json.Unmarshal([]byte(authRegisterBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"email\": \"email.example.com\",\n      \"name\": \"Ahmad Sayed\",\n      \"password\": \"password\"\n   }'")
		}
	}
	v := &auth.RegisterPayload{
		Name:     body.Name,
		Email:    body.Email,
		Password: body.Password,
	}

	return v, nil
}

// BuildSigninPayload builds the payload for the auth signin endpoint from CLI
// flags.
func BuildSigninPayload(authSigninBody string) (*auth.SigninPayload, error) {
	var err error
	var body SigninRequestBody
	{
		err = json.Unmarshal([]byte(authSigninBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"email\": \"email.example.com\",\n      \"password\": \"password\"\n   }'")
		}
	}
	v := &auth.SigninPayload{
		Email:    body.Email,
		Password: body.Password,
	}

	return v, nil
}

// BuildSignoutPayload builds the payload for the auth signout endpoint from
// CLI flags.
func BuildSignoutPayload(authSignoutBody string) (*auth.SignoutPayload, error) {
	var err error
	var body SignoutRequestBody
	{
		err = json.Unmarshal([]byte(authSignoutBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"jwt\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\"\n   }'")
		}
	}
	v := &auth.SignoutPayload{
		JWT: body.JWT,
	}

	return v, nil
}

// BuildGetbasicinfoPayload builds the payload for the auth getbasicinfo
// endpoint from CLI flags.
func BuildGetbasicinfoPayload(authGetbasicinfoBody string) (*auth.GetbasicinfoPayload, error) {
	var err error
	var body GetbasicinfoRequestBody
	{
		err = json.Unmarshal([]byte(authGetbasicinfoBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"jwt\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\"\n   }'")
		}
	}
	v := &auth.GetbasicinfoPayload{
		JWT: body.JWT,
	}

	return v, nil
}
