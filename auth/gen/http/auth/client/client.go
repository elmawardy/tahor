// Code generated by goa v3.2.3, DO NOT EDIT.
//
// auth client HTTP transport
//
// Command:
// $ goa gen github.com/elmawardy/tahor/auth/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the auth service endpoint HTTP clients.
type Client struct {
	// Register Doer is the HTTP client used to make requests to the register
	// endpoint.
	RegisterDoer goahttp.Doer

	// Signin Doer is the HTTP client used to make requests to the signin endpoint.
	SigninDoer goahttp.Doer

	// Signout Doer is the HTTP client used to make requests to the signout
	// endpoint.
	SignoutDoer goahttp.Doer

	// Getbasicinfo Doer is the HTTP client used to make requests to the
	// getbasicinfo endpoint.
	GetbasicinfoDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the auth service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		RegisterDoer:        doer,
		SigninDoer:          doer,
		SignoutDoer:         doer,
		GetbasicinfoDoer:    doer,
		CORSDoer:            doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// Register returns an endpoint that makes HTTP requests to the auth service
// register server.
func (c *Client) Register() goa.Endpoint {
	var (
		encodeRequest  = EncodeRegisterRequest(c.encoder)
		decodeResponse = DecodeRegisterResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildRegisterRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RegisterDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "register", err)
		}
		return decodeResponse(resp)
	}
}

// Signin returns an endpoint that makes HTTP requests to the auth service
// signin server.
func (c *Client) Signin() goa.Endpoint {
	var (
		encodeRequest  = EncodeSigninRequest(c.encoder)
		decodeResponse = DecodeSigninResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildSigninRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SigninDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "signin", err)
		}
		return decodeResponse(resp)
	}
}

// Signout returns an endpoint that makes HTTP requests to the auth service
// signout server.
func (c *Client) Signout() goa.Endpoint {
	var (
		encodeRequest  = EncodeSignoutRequest(c.encoder)
		decodeResponse = DecodeSignoutResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildSignoutRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SignoutDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "signout", err)
		}
		return decodeResponse(resp)
	}
}

// Getbasicinfo returns an endpoint that makes HTTP requests to the auth
// service getbasicinfo server.
func (c *Client) Getbasicinfo() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetbasicinfoRequest(c.encoder)
		decodeResponse = DecodeGetbasicinfoResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetbasicinfoRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetbasicinfoDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "getbasicinfo", err)
		}
		return decodeResponse(resp)
	}
}
