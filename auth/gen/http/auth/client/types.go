// Code generated by goa v3.2.3, DO NOT EDIT.
//
// auth HTTP client types
//
// Command:
// $ goa gen github.com/elmawardy/tahor/auth/design

package client

import (
	auth "github.com/elmawardy/tahor/auth/gen/auth"
	goa "goa.design/goa/v3/pkg"
)

// RegisterRequestBody is the type of the "auth" service "register" endpoint
// HTTP request body.
type RegisterRequestBody struct {
	// Display name of the user
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Email used to perform signin
	Email string `form:"email" json:"email" xml:"email"`
	// Password used to perform signin
	Password string `form:"password" json:"password" xml:"password"`
}

// SigninRequestBody is the type of the "auth" service "signin" endpoint HTTP
// request body.
type SigninRequestBody struct {
	// Email used to perform signin
	Email string `form:"email" json:"email" xml:"email"`
	// Password used to perform signin
	Password string `form:"password" json:"password" xml:"password"`
}

// SignoutRequestBody is the type of the "auth" service "signout" endpoint HTTP
// request body.
type SignoutRequestBody struct {
	// the user json web token
	JWT string `form:"jwt" json:"jwt" xml:"jwt"`
}

// GetbasicinfoRequestBody is the type of the "auth" service "getbasicinfo"
// endpoint HTTP request body.
type GetbasicinfoRequestBody struct {
	// the user json web token
	JWT string `form:"jwt" json:"jwt" xml:"jwt"`
}

// SigninResponseBody is the type of the "auth" service "signin" endpoint HTTP
// response body.
type SigninResponseBody struct {
	// JWT token
	JWT *string `form:"jwt,omitempty" json:"jwt,omitempty" xml:"jwt,omitempty"`
}

// GetbasicinfoResponseBody is the type of the "auth" service "getbasicinfo"
// endpoint HTTP response body.
type GetbasicinfoResponseBody struct {
	// The user display name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// NewRegisterRequestBody builds the HTTP request body from the payload of the
// "register" endpoint of the "auth" service.
func NewRegisterRequestBody(p *auth.RegisterPayload) *RegisterRequestBody {
	body := &RegisterRequestBody{
		Name:     p.Name,
		Email:    p.Email,
		Password: p.Password,
	}
	return body
}

// NewSigninRequestBody builds the HTTP request body from the payload of the
// "signin" endpoint of the "auth" service.
func NewSigninRequestBody(p *auth.SigninPayload) *SigninRequestBody {
	body := &SigninRequestBody{
		Email:    p.Email,
		Password: p.Password,
	}
	return body
}

// NewSignoutRequestBody builds the HTTP request body from the payload of the
// "signout" endpoint of the "auth" service.
func NewSignoutRequestBody(p *auth.SignoutPayload) *SignoutRequestBody {
	body := &SignoutRequestBody{
		JWT: p.JWT,
	}
	return body
}

// NewGetbasicinfoRequestBody builds the HTTP request body from the payload of
// the "getbasicinfo" endpoint of the "auth" service.
func NewGetbasicinfoRequestBody(p *auth.GetbasicinfoPayload) *GetbasicinfoRequestBody {
	body := &GetbasicinfoRequestBody{
		JWT: p.JWT,
	}
	return body
}

// NewSigninCredsOK builds a "auth" service "signin" endpoint result from a
// HTTP "OK" response.
func NewSigninCredsOK(body *SigninResponseBody) *auth.Creds {
	v := &auth.Creds{
		JWT: *body.JWT,
	}

	return v
}

// NewGetbasicinfoUserBasicInfoOK builds a "auth" service "getbasicinfo"
// endpoint result from a HTTP "OK" response.
func NewGetbasicinfoUserBasicInfoOK(body *GetbasicinfoResponseBody) *auth.UserBasicInfo {
	v := &auth.UserBasicInfo{
		Name: body.Name,
	}

	return v
}

// ValidateSigninResponseBody runs the validations defined on SigninResponseBody
func ValidateSigninResponseBody(body *SigninResponseBody) (err error) {
	if body.JWT == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("jwt", "body"))
	}
	return
}
