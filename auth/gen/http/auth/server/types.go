// Code generated by goa v3.2.3, DO NOT EDIT.
//
// auth HTTP server types
//
// Command:
// $ goa gen github.com/elmawardy/tahor/auth/design

package server

import (
	auth "github.com/elmawardy/tahor/auth/gen/auth"
	goa "goa.design/goa/v3/pkg"
)

// RegisterRequestBody is the type of the "auth" service "register" endpoint
// HTTP request body.
type RegisterRequestBody struct {
	// Display name of the user
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Email used to perform signin
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Password used to perform signin
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// SigninRequestBody is the type of the "auth" service "signin" endpoint HTTP
// request body.
type SigninRequestBody struct {
	// Email used to perform signin
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Password used to perform signin
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// SignoutRequestBody is the type of the "auth" service "signout" endpoint HTTP
// request body.
type SignoutRequestBody struct {
	// the user json web token
	JWT *string `form:"jwt,omitempty" json:"jwt,omitempty" xml:"jwt,omitempty"`
}

// GetbasicinfoRequestBody is the type of the "auth" service "getbasicinfo"
// endpoint HTTP request body.
type GetbasicinfoRequestBody struct {
	// the user json web token
	JWT *string `form:"jwt,omitempty" json:"jwt,omitempty" xml:"jwt,omitempty"`
}

// SigninResponseBody is the type of the "auth" service "signin" endpoint HTTP
// response body.
type SigninResponseBody struct {
	// JWT token
	JWT string `form:"jwt" json:"jwt" xml:"jwt"`
}

// GetbasicinfoResponseBody is the type of the "auth" service "getbasicinfo"
// endpoint HTTP response body.
type GetbasicinfoResponseBody struct {
	// The user display name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// NewSigninResponseBody builds the HTTP response body from the result of the
// "signin" endpoint of the "auth" service.
func NewSigninResponseBody(res *auth.Creds) *SigninResponseBody {
	body := &SigninResponseBody{
		JWT: res.JWT,
	}
	return body
}

// NewGetbasicinfoResponseBody builds the HTTP response body from the result of
// the "getbasicinfo" endpoint of the "auth" service.
func NewGetbasicinfoResponseBody(res *auth.UserBasicInfo) *GetbasicinfoResponseBody {
	body := &GetbasicinfoResponseBody{
		Name: res.Name,
	}
	return body
}

// NewRegisterPayload builds a auth service register endpoint payload.
func NewRegisterPayload(body *RegisterRequestBody) *auth.RegisterPayload {
	v := &auth.RegisterPayload{
		Name:     body.Name,
		Email:    *body.Email,
		Password: *body.Password,
	}

	return v
}

// NewSigninPayload builds a auth service signin endpoint payload.
func NewSigninPayload(body *SigninRequestBody) *auth.SigninPayload {
	v := &auth.SigninPayload{
		Email:    *body.Email,
		Password: *body.Password,
	}

	return v
}

// NewSignoutPayload builds a auth service signout endpoint payload.
func NewSignoutPayload(body *SignoutRequestBody) *auth.SignoutPayload {
	v := &auth.SignoutPayload{
		JWT: *body.JWT,
	}

	return v
}

// NewGetbasicinfoPayload builds a auth service getbasicinfo endpoint payload.
func NewGetbasicinfoPayload(body *GetbasicinfoRequestBody) *auth.GetbasicinfoPayload {
	v := &auth.GetbasicinfoPayload{
		JWT: *body.JWT,
	}

	return v
}

// ValidateRegisterRequestBody runs the validations defined on
// RegisterRequestBody
func ValidateRegisterRequestBody(body *RegisterRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	return
}

// ValidateSigninRequestBody runs the validations defined on SigninRequestBody
func ValidateSigninRequestBody(body *SigninRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	return
}

// ValidateSignoutRequestBody runs the validations defined on SignoutRequestBody
func ValidateSignoutRequestBody(body *SignoutRequestBody) (err error) {
	if body.JWT == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("jwt", "body"))
	}
	return
}

// ValidateGetbasicinfoRequestBody runs the validations defined on
// GetbasicinfoRequestBody
func ValidateGetbasicinfoRequestBody(body *GetbasicinfoRequestBody) (err error) {
	if body.JWT == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("jwt", "body"))
	}
	return
}
