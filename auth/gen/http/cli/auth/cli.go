// Code generated by goa v3.2.3, DO NOT EDIT.
//
// auth HTTP client CLI support package
//
// Command:
// $ goa gen github.com/elmawardy/tahor/auth/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	authc "github.com/elmawardy/tahor/auth/gen/http/auth/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `auth (register|signin|signout|getbasicinfo)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` auth register --body '{
      "email": "email.example.com",
      "name": "Ahmad Sayed",
      "password": "password"
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		authFlags = flag.NewFlagSet("auth", flag.ContinueOnError)

		authRegisterFlags    = flag.NewFlagSet("register", flag.ExitOnError)
		authRegisterBodyFlag = authRegisterFlags.String("body", "REQUIRED", "")

		authSigninFlags    = flag.NewFlagSet("signin", flag.ExitOnError)
		authSigninBodyFlag = authSigninFlags.String("body", "REQUIRED", "")

		authSignoutFlags    = flag.NewFlagSet("signout", flag.ExitOnError)
		authSignoutBodyFlag = authSignoutFlags.String("body", "REQUIRED", "")

		authGetbasicinfoFlags    = flag.NewFlagSet("getbasicinfo", flag.ExitOnError)
		authGetbasicinfoBodyFlag = authGetbasicinfoFlags.String("body", "REQUIRED", "")
	)
	authFlags.Usage = authUsage
	authRegisterFlags.Usage = authRegisterUsage
	authSigninFlags.Usage = authSigninUsage
	authSignoutFlags.Usage = authSignoutUsage
	authGetbasicinfoFlags.Usage = authGetbasicinfoUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "auth":
			svcf = authFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "auth":
			switch epn {
			case "register":
				epf = authRegisterFlags

			case "signin":
				epf = authSigninFlags

			case "signout":
				epf = authSignoutFlags

			case "getbasicinfo":
				epf = authGetbasicinfoFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "auth":
			c := authc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "register":
				endpoint = c.Register()
				data, err = authc.BuildRegisterPayload(*authRegisterBodyFlag)
			case "signin":
				endpoint = c.Signin()
				data, err = authc.BuildSigninPayload(*authSigninBodyFlag)
			case "signout":
				endpoint = c.Signout()
				data, err = authc.BuildSignoutPayload(*authSignoutBodyFlag)
			case "getbasicinfo":
				endpoint = c.Getbasicinfo()
				data, err = authc.BuildGetbasicinfoPayload(*authGetbasicinfoBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// authUsage displays the usage of the auth command and its subcommands.
func authUsage() {
	fmt.Fprintf(os.Stderr, `A service to authenticate users
Usage:
    %s [globalflags] auth COMMAND [flags]

COMMAND:
    register: Registers user in the database
    signin: Creates a valid JWT
    signout: Signs user out from the system
    getbasicinfo: Gets user basic info like display name

Additional help:
    %s auth COMMAND --help
`, os.Args[0], os.Args[0])
}
func authRegisterUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] auth register -body JSON

Registers user in the database
    -body JSON: 

Example:
    `+os.Args[0]+` auth register --body '{
      "email": "email.example.com",
      "name": "Ahmad Sayed",
      "password": "password"
   }'
`, os.Args[0])
}

func authSigninUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] auth signin -body JSON

Creates a valid JWT
    -body JSON: 

Example:
    `+os.Args[0]+` auth signin --body '{
      "email": "email.example.com",
      "password": "password"
   }'
`, os.Args[0])
}

func authSignoutUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] auth signout -body JSON

Signs user out from the system
    -body JSON: 

Example:
    `+os.Args[0]+` auth signout --body '{
      "jwt": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ"
   }'
`, os.Args[0])
}

func authGetbasicinfoUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] auth getbasicinfo -body JSON

Gets user basic info like display name
    -body JSON: 

Example:
    `+os.Args[0]+` auth getbasicinfo --body '{
      "jwt": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ"
   }'
`, os.Args[0])
}
