// Code generated by goa v3.2.3, DO NOT EDIT.
//
// cases HTTP client CLI support package
//
// Command:
// $ goa gen github.com/elmawardy/tahor/cases/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	casesc "github.com/elmawardy/tahor/cases/gen/http/cases/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `cases (get|add)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` cases get` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		casesFlags = flag.NewFlagSet("cases", flag.ContinueOnError)

		casesGetFlags = flag.NewFlagSet("get", flag.ExitOnError)

		casesAddFlags    = flag.NewFlagSet("add", flag.ExitOnError)
		casesAddBodyFlag = casesAddFlags.String("body", "REQUIRED", "")
	)
	casesFlags.Usage = casesUsage
	casesGetFlags.Usage = casesGetUsage
	casesAddFlags.Usage = casesAddUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "cases":
			svcf = casesFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "cases":
			switch epn {
			case "get":
				epf = casesGetFlags

			case "add":
				epf = casesAddFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "cases":
			c := casesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get":
				endpoint = c.Get()
				data = nil
			case "add":
				endpoint = c.Add()
				data, err = casesc.BuildAddPayload(*casesAddBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// casesUsage displays the usage of the cases command and its subcommands.
func casesUsage() {
	fmt.Fprintf(os.Stderr, `Cases service
Usage:
    %s [globalflags] cases COMMAND [flags]

COMMAND:
    get: Get implements get.
    add: Add implements add.

Additional help:
    %s cases COMMAND --help
`, os.Args[0], os.Args[0])
}
func casesGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] cases get

Get implements get.

Example:
    `+os.Args[0]+` cases get
`, os.Args[0])
}

func casesAddUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] cases add -body JSON

Add implements add.
    -body JSON: 

Example:
    `+os.Args[0]+` cases add --body '{
      "collected": 0.8091384557987812,
      "currency": "Autem qui aperiam aut.",
      "desc": "Expedita accusamus totam tempore.",
      "tags": [
         "Cupiditate qui quo veritatis est.",
         "Accusantium sed voluptas ut qui."
      ],
      "target": 0.5160925211499976
   }'
`, os.Args[0])
}
