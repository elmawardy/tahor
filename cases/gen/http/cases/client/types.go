// Code generated by goa v3.2.3, DO NOT EDIT.
//
// cases HTTP client types
//
// Command:
// $ goa gen github.com/elmawardy/tahor/cases/design

package client

import (
	cases "github.com/elmawardy/tahor/cases/gen/cases"
)

// AddRequestBody is the type of the "cases" service "add" endpoint HTTP
// request body.
type AddRequestBody struct {
	// Case Description
	Desc string `form:"desc" json:"desc" xml:"desc"`
	// Target Quantity
	Target float64 `form:"target" json:"target" xml:"target"`
	// Collected Quantity
	Collected float64 `form:"collected" json:"collected" xml:"collected"`
	// Currency
	Currency string `form:"currency" json:"currency" xml:"currency"`
	// Tags array
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
}

// GetResponseBody is the type of the "cases" service "get" endpoint HTTP
// response body.
type GetResponseBody []*GetResponseResponse

// AddResponseBody is the type of the "cases" service "add" endpoint HTTP
// response body.
type AddResponseBody struct {
	// The description of the case
	Desc *string `form:"desc,omitempty" json:"desc,omitempty" xml:"desc,omitempty"`
}

// GetResponseResponse is used to define fields on response body types.
type GetResponseResponse struct {
	// Case ID
	ID *uint `form:"ID,omitempty" json:"ID,omitempty" xml:"ID,omitempty"`
	// Targetted value
	Target *float64 `form:"Target,omitempty" json:"Target,omitempty" xml:"Target,omitempty"`
	// Collected value
	Collected *float64 `form:"Collected,omitempty" json:"Collected,omitempty" xml:"Collected,omitempty"`
	// Currency
	Currency *string `form:"Currency,omitempty" json:"Currency,omitempty" xml:"Currency,omitempty"`
	// Case Description
	Description *string `form:"Description,omitempty" json:"Description,omitempty" xml:"Description,omitempty"`
	// Date Modified in the database
	DateModified *string `form:"DateModified,omitempty" json:"DateModified,omitempty" xml:"DateModified,omitempty"`
	// Tags
	Tags []string `form:"Tags,omitempty" json:"Tags,omitempty" xml:"Tags,omitempty"`
}

// NewAddRequestBody builds the HTTP request body from the payload of the "add"
// endpoint of the "cases" service.
func NewAddRequestBody(p *cases.AddPayload) *AddRequestBody {
	body := &AddRequestBody{
		Desc:      p.Desc,
		Target:    p.Target,
		Collected: p.Collected,
		Currency:  p.Currency,
	}
	if p.Tags != nil {
		body.Tags = make([]string, len(p.Tags))
		for i, val := range p.Tags {
			body.Tags[i] = val
		}
	}
	return body
}

// NewGetResponse2OK builds a "cases" service "get" endpoint result from a HTTP
// "OK" response.
func NewGetResponse2OK(body []*GetResponseResponse) []*cases.GetResponse {
	v := make([]*cases.GetResponse, len(body))
	for i, val := range body {
		v[i] = unmarshalGetResponseResponseToCasesGetResponse(val)
	}
	return v
}

// NewAddResponseOK builds a "cases" service "add" endpoint result from a HTTP
// "OK" response.
func NewAddResponseOK(body *AddResponseBody) *cases.AddResponse {
	v := &cases.AddResponse{
		Desc: body.Desc,
	}

	return v
}
