// Code generated by goa v3.2.3, DO NOT EDIT.
//
// cases HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/elmawardy/tahor/cases/design

package server

import (
	"context"
	"io"
	"net/http"

	cases "github.com/elmawardy/tahor/cases/gen/cases"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeGetResponse returns an encoder for responses returned by the cases get
// endpoint.
func EncodeGetResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.([]*cases.GetResponse)
		enc := encoder(ctx, w)
		body := NewGetResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeAddResponse returns an encoder for responses returned by the cases add
// endpoint.
func EncodeAddResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*cases.AddResponse)
		enc := encoder(ctx, w)
		body := NewAddResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeAddRequest returns a decoder for requests sent to the cases add
// endpoint.
func DecodeAddRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body AddRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateAddRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewAddPayload(&body)

		return payload, nil
	}
}

// marshalCasesGetResponseToGetResponseResponse builds a value of type
// *GetResponseResponse from a value of type *cases.GetResponse.
func marshalCasesGetResponseToGetResponseResponse(v *cases.GetResponse) *GetResponseResponse {
	res := &GetResponseResponse{
		ID:           v.ID,
		Target:       v.Target,
		Collected:    v.Collected,
		Currency:     v.Currency,
		Description:  v.Description,
		DateModified: v.DateModified,
	}
	if v.Tags != nil {
		res.Tags = make([]string, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = val
		}
	}

	return res
}
