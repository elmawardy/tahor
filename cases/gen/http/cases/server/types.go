// Code generated by goa v3.2.3, DO NOT EDIT.
//
// cases HTTP server types
//
// Command:
// $ goa gen github.com/elmawardy/tahor/cases/design

package server

import (
	cases "github.com/elmawardy/tahor/cases/gen/cases"
	goa "goa.design/goa/v3/pkg"
)

// GetRequestBody is the type of the "cases" service "get" endpoint HTTP
// request body.
type GetRequestBody struct {
	// JWT used for authentication
	Token *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
}

// AddRequestBody is the type of the "cases" service "add" endpoint HTTP
// request body.
type AddRequestBody struct {
	// Case Description
	Desc *string `form:"desc,omitempty" json:"desc,omitempty" xml:"desc,omitempty"`
	// Target Quantity
	Target *float64 `form:"target,omitempty" json:"target,omitempty" xml:"target,omitempty"`
	// Collected Quantity
	Collected *float64 `form:"collected,omitempty" json:"collected,omitempty" xml:"collected,omitempty"`
	// Currency
	Currency *string `form:"currency,omitempty" json:"currency,omitempty" xml:"currency,omitempty"`
	// Tags array
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
}

// GetResponseBody is the type of the "cases" service "get" endpoint HTTP
// response body.
type GetResponseBody []*GetResponseResponse

// AddResponseBody is the type of the "cases" service "add" endpoint HTTP
// response body.
type AddResponseBody struct {
	// The description of the case
	Desc *string `form:"desc,omitempty" json:"desc,omitempty" xml:"desc,omitempty"`
}

// GetInvalidScopesResponseBody is the type of the "cases" service "get"
// endpoint HTTP response body for the "invalid-scopes" error.
type GetInvalidScopesResponseBody string

// GetUnauthorizedResponseBody is the type of the "cases" service "get"
// endpoint HTTP response body for the "unauthorized" error.
type GetUnauthorizedResponseBody string

// AddUnauthorizedResponseBody is the type of the "cases" service "add"
// endpoint HTTP response body for the "unauthorized" error.
type AddUnauthorizedResponseBody string

// GetResponseResponse is used to define fields on response body types.
type GetResponseResponse struct {
	// Case ID
	ID *uint `form:"ID,omitempty" json:"ID,omitempty" xml:"ID,omitempty"`
	// Targetted value
	Target *float64 `form:"Target,omitempty" json:"Target,omitempty" xml:"Target,omitempty"`
	// Collected value
	Collected *float64 `form:"Collected,omitempty" json:"Collected,omitempty" xml:"Collected,omitempty"`
	// Currency
	Currency *string `form:"Currency,omitempty" json:"Currency,omitempty" xml:"Currency,omitempty"`
	// Case Description
	Description *string `form:"Description,omitempty" json:"Description,omitempty" xml:"Description,omitempty"`
	// Date Modified in the database
	DateModified *string `form:"DateModified,omitempty" json:"DateModified,omitempty" xml:"DateModified,omitempty"`
	// Tags
	Tags []string `form:"Tags,omitempty" json:"Tags,omitempty" xml:"Tags,omitempty"`
}

// NewGetResponseBody builds the HTTP response body from the result of the
// "get" endpoint of the "cases" service.
func NewGetResponseBody(res []*cases.GetResponse) GetResponseBody {
	body := make([]*GetResponseResponse, len(res))
	for i, val := range res {
		body[i] = marshalCasesGetResponseToGetResponseResponse(val)
	}
	return body
}

// NewAddResponseBody builds the HTTP response body from the result of the
// "add" endpoint of the "cases" service.
func NewAddResponseBody(res *cases.AddResponse) *AddResponseBody {
	body := &AddResponseBody{
		Desc: res.Desc,
	}
	return body
}

// NewGetInvalidScopesResponseBody builds the HTTP response body from the
// result of the "get" endpoint of the "cases" service.
func NewGetInvalidScopesResponseBody(res cases.InvalidScopes) GetInvalidScopesResponseBody {
	body := GetInvalidScopesResponseBody(res)
	return body
}

// NewGetUnauthorizedResponseBody builds the HTTP response body from the result
// of the "get" endpoint of the "cases" service.
func NewGetUnauthorizedResponseBody(res cases.Unauthorized) GetUnauthorizedResponseBody {
	body := GetUnauthorizedResponseBody(res)
	return body
}

// NewAddUnauthorizedResponseBody builds the HTTP response body from the result
// of the "add" endpoint of the "cases" service.
func NewAddUnauthorizedResponseBody(res cases.Unauthorized) AddUnauthorizedResponseBody {
	body := AddUnauthorizedResponseBody(res)
	return body
}

// NewGetPayload builds a cases service get endpoint payload.
func NewGetPayload(body *GetRequestBody) *cases.GetPayload {
	v := &cases.GetPayload{
		Token: *body.Token,
	}

	return v
}

// NewAddPayload builds a cases service add endpoint payload.
func NewAddPayload(body *AddRequestBody) *cases.AddPayload {
	v := &cases.AddPayload{
		Desc:      *body.Desc,
		Target:    *body.Target,
		Collected: *body.Collected,
		Currency:  *body.Currency,
	}
	if body.Tags != nil {
		v.Tags = make([]string, len(body.Tags))
		for i, val := range body.Tags {
			v.Tags[i] = val
		}
	}

	return v
}

// ValidateGetRequestBody runs the validations defined on GetRequestBody
func ValidateGetRequestBody(body *GetRequestBody) (err error) {
	if body.Token == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("token", "body"))
	}
	return
}

// ValidateAddRequestBody runs the validations defined on AddRequestBody
func ValidateAddRequestBody(body *AddRequestBody) (err error) {
	if body.Desc == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("desc", "body"))
	}
	if body.Target == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("target", "body"))
	}
	if body.Collected == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("collected", "body"))
	}
	if body.Currency == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("currency", "body"))
	}
	return
}
