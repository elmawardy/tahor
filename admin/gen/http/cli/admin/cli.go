// Code generated by goa v3.2.4, DO NOT EDIT.
//
// admin HTTP client CLI support package
//
// Command:
// $ goa gen github.com/elmawardy/tahor/admin/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	adminc "github.com/elmawardy/tahor/admin/gen/http/admin/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `admin addcase
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` admin addcase --body '{
      "collected": 0.6763083345048223,
      "currency": "Possimus quidem aut cumque qui commodi.",
      "desc": "Iure repellendus.",
      "tags": [
         "Soluta dolor ut.",
         "Molestiae non consectetur ut quam.",
         "Enim dolor culpa eum ullam.",
         "Vel ex vero."
      ],
      "target": 0.24574395491977002
   }' --jwt "Provident asperiores reprehenderit."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		adminFlags = flag.NewFlagSet("admin", flag.ContinueOnError)

		adminAddcaseFlags    = flag.NewFlagSet("addcase", flag.ExitOnError)
		adminAddcaseBodyFlag = adminAddcaseFlags.String("body", "REQUIRED", "")
		adminAddcaseJWTFlag  = adminAddcaseFlags.String("jwt", "", "")
	)
	adminFlags.Usage = adminUsage
	adminAddcaseFlags.Usage = adminAddcaseUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "admin":
			svcf = adminFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "admin":
			switch epn {
			case "addcase":
				epf = adminAddcaseFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "admin":
			c := adminc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "addcase":
				endpoint = c.Addcase()
				data, err = adminc.BuildAddcasePayload(*adminAddcaseBodyFlag, *adminAddcaseJWTFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// adminUsage displays the usage of the admin command and its subcommands.
func adminUsage() {
	fmt.Fprintf(os.Stderr, `A service to administrate the project
Usage:
    %s [globalflags] admin COMMAND [flags]

COMMAND:
    addcase: Addcase implements addcase.

Additional help:
    %s admin COMMAND --help
`, os.Args[0], os.Args[0])
}
func adminAddcaseUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] admin addcase -body JSON -jwt STRING

Addcase implements addcase.
    -body JSON: 
    -jwt STRING: 

Example:
    `+os.Args[0]+` admin addcase --body '{
      "collected": 0.6763083345048223,
      "currency": "Possimus quidem aut cumque qui commodi.",
      "desc": "Iure repellendus.",
      "tags": [
         "Soluta dolor ut.",
         "Molestiae non consectetur ut quam.",
         "Enim dolor culpa eum ullam.",
         "Vel ex vero."
      ],
      "target": 0.24574395491977002
   }' --jwt "Provident asperiores reprehenderit."
`, os.Args[0])
}
